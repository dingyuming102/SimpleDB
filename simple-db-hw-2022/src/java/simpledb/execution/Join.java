package simpledb.execution;

import simpledb.common.DbException;
import simpledb.execution.algorithm.*;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate       jp;
    private OpIterator          child1;
    private OpIterator          child2;
    private TupleDesc           td;

    private final JoinStrategy  strategy;
    private JoinHelper          joinHelper;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // DONE
        this(p, child1, child2, JoinStrategy.NestedLoop);
    }

    public Join(JoinPredicate p, OpIterator child1, OpIterator child2, JoinStrategy strategy) {
        // DONE
        this.jp         = p;
        this.child1     = child1;
        this.child2     = child2;
        this.td         = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());

        this.strategy   = strategy;
    }

    public JoinPredicate getJoinPredicate() {
        // DONE
        return jp;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // DONE
        return child1.getTupleDesc().getFieldName(jp.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // DONE
        return child2.getTupleDesc().getFieldName(jp.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // DONE
        return td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // DONE
        this.child1.open();
        this.child2.open();
        // You can choose sortMerge join, hash join, or nested loop join
        switch (strategy) {
            case NestedLoop:
                this.joinHelper = new NestedLoopJoin(jp, child1, child2);
                break;
            case SortMerge:
                this.joinHelper = new SortMergeJoin(jp, child1, child2);
                break;
            case Hash:
                this.joinHelper = new HashJoin(jp, child1, child2);
                break;
        }
        super.open();
    }

    public void close() {
        // DONE
        super.close();
        this.joinHelper = null;
        this.child2.close();
        this.child1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // DONE
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // DONE
        return joinHelper.fetchNext();
    }

    @Override
    public OpIterator[] getChildren() {
        // DONE
        return new OpIterator[] {child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // DONE
        if (children.length < 2) {
            return;
        }
        this.child1 = children[0];
        this.child2 = children[1];
        this.td     = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

}
